# backend/app/models/vulnerability.py
from sqlalchemy import Column, Integer, String, DateTime, Float, Boolean
from sqlalchemy.orm import relationship
from app.database import Base
from app.models.cve_description import CveDescription


class Vulnerability(Base):
    __tablename__ = "vulnerabilities"

    id = Column(Integer, primary_key=True, index=True)
    cve_id = Column(String, unique=True, index=True)
    source_identifier = Column(String, nullable=True)
    published = Column(DateTime, nullable=True)
    last_modified = Column(DateTime, nullable=True)
    status = Column(String, nullable=True)
    cwe = Column(String, nullable=True)

    # CVSS general
    cvss_version = Column(String, nullable=True)
    score = Column(String, nullable=True)
    vector = Column(String, nullable=True)
    severity = Column(String, nullable=True)

    # Campos de nivel superior en metrics
    exploitability_score = Column(Float, nullable=True)
    impact_score = Column(Float, nullable=True)
    user_interaction_required = Column(Boolean, nullable=True)
    obtain_all_privileges = Column(Boolean, nullable=True)
    obtain_user_privileges = Column(Boolean, nullable=True)
    obtain_other_privileges = Column(Boolean, nullable=True)

    # Campos de cvssData (v3.x)
    attack_vector = Column(String, nullable=True)
    attack_complexity = Column(String, nullable=True)
    privileges_required = Column(String, nullable=True)
    user_interaction = Column(String, nullable=True)
    scope = Column(String, nullable=True)
    confidentiality_impact = Column(String, nullable=True)
    integrity_impact = Column(String, nullable=True)
    availability_impact = Column(String, nullable=True)

    # Campos de cvssData (v2)
    access_vector = Column(String, nullable=True)
    access_complexity = Column(String, nullable=True)
    authentication = Column(String, nullable=True)

    platforms = relationship(
        "Platform",
        secondary="cve_cpe",
        primaryjoin="Vulnerability.cve_id == foreign(CveCpe.cve_name)",
        secondaryjoin="Platform.cpe_uri == foreign(CveCpe.cpe_uri)",
        back_populates="vulnerabilities"
    )    
    descriptions = relationship("CveDescription", back_populates="vulnerability", cascade="all, delete-orphan")
    references = relationship("Reference", back_populates="vulnerability", cascade="all, delete-orphan")


